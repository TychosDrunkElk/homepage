{
  "name": "ogg",
  "description": "NodeJS native binding to libogg",
  "keywords": [
    "ogg",
    "libogg",
    "encode",
    "decode",
    "stream"
  ],
  "version": "1.1.2",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-ogg.git"
  },
  "main": "./index.js",
  "dependencies": {
    "bindings": "~1.2.0",
    "debug": "~1.0.0",
    "readable-stream": "1.0"
  },
  "devDependencies": {
    "mocha": "*",
    "ogg-packet": "1"
  },
  "scripts": {
    "test": "mocha --reporter spec",
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "node-ogg\n========\n### NodeJS native binding to libogg\n[![Build Status](https://travis-ci.org/TooTallNate/node-ogg.svg?branch=master)](https://travis-ci.org/TooTallNate/node-ogg)\n\nThis module provides a Writable stream interface for decoding `ogg` files, and a\nReadable stream for encoding `ogg` files. `libogg` only provides the interfaces\nfor multiplexing the various streams embedding into an ogg file (and vice versa),\ntherefore this module is intended to be used in conjunction with a\n`node-ogg`-compatible stream module, like `node-vorbis` and `node-theora`.\n\n\nInstallation\n------------\n\n`node-ogg` comes bundled with its own copy of `libogg`, so\nthere's no need to have the library pre-installed on your system.\n\nSimply compile and install `node-ogg` using `npm`:\n\n``` bash\n$ npm install ogg\n```\n\n__NOTE:__ `node-ogg` requires to be built using `node-gyp` v0.8.0 or newer!\n\n\nExample\n-------\n\nHere's an example of using the `Decoder` class and simply listening for the raw\nevents and `console.log()`s information about each \"packet\" emitted from each ogg\nstream:\n\n``` javascript\nvar fs = require('fs');\nvar ogg = require('ogg');\nvar file = __dirname + '/Hydrate-Kenny_Beltrey.ogg';\n\nvar decoder = new ogg.Decoder();\n\ndecoder.on('stream', function (stream) {\n  console.log('new \"stream\":', stream.serialno);\n\n  // emitted for each `ogg_packet` instance in the stream.\n  stream.on('data', function (packet) {\n    console.log('got \"packet\":', packet.packetno);\n  });\n\n  // emitted after the last packet of the stream\n  stream.on('end', function () {\n    console.log('got \"end\":', stream.serialno);\n  });\n});\n\n// pipe the ogg file to the Decoder\nfs.createReadStream(file).pipe(decoder);\n```\n\nSee the `examples` directory for some more example code.\n\n\nAPI\n---\n\n### Decoder class\n\nThe `Decoder` class is a `Writable` stream that accepts an ogg file written to\nit, and emits \"stream\" events when a new stream is encountered. The\n`DecoderStream` instance is a readable stream that outputs `ogg_packet` Buffer\ninstances.encountered, which\nyou are then expected to pass along to a ogg stream decoder.\n\n### Encoder class\n\nThe `Encoder` class is a `Readable` stream where you are given `EncoderStream`\ninstances and are required to write `ogg_packet`s received from an ogg stream\nencoder to them in order to create a valid ogg file.\n\n\nOGG Stream Decoders/Encoders\n----------------------------\n\nHere's a list of known ogg stream decoders and encoders that are compatible with / depend on `node-ogg`.\nPlease send pull requests for additional modules if you write one.\n\n| **Module**                       | **Decoder?** | **Encoder?**\n|:--------------------------------:|:------------:|:------------:\n|   [`node-vorbis`][node-vorbis]   |      ✓       |      ✓\n\n[node-vorbis]: https://github.com/TooTallNate/node-vorbis\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TooTallNate/node-ogg/issues"
  },
  "homepage": "https://github.com/TooTallNate/node-ogg",
  "_id": "ogg@1.1.2",
  "dist": {
    "shasum": "7449f12d079b97a91bb03eb99d40c1bd815191b8"
  },
  "_from": "ogg@",
  "_resolved": "http://registry.npmjs.org/ogg/-/ogg-1.1.2.tgz"
}
